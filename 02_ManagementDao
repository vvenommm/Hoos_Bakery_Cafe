package dao;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import util.JDBCUtil;

public class ManagementDao {
	
	//싱글톤 패턴
	public ManagementDao() {
			
	}
	public static ManagementDao instance; 
	public static ManagementDao getInstance() { 
		if(instance == null) {
			instance = new ManagementDao();
		}
		return instance;
	}
	
	
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
	//MNG_MENU [1.메뉴관리]
	
	
	//모든 메뉴 5개씩 출력
	
	public List<Map<String, Object>> allProdList(){
		String sql = "SELECT U.* " + 
				" FROM " + 
				" ( " + 
				"    SELECT ROWNUM RNUM, T.* " + 
				"    FROM " + 
				"    ( " + 
				"        SELECT MENU_ID FROM B_MENU " + 
				"        WHERE  MENU_ID LIKE '?%' " + 
				"        ORDER BY MENU_ID DESC " + 
				"    ) T " + 
				" ) U " + 
				" WHERE U.RNUM <= 5";
		
		
		
		return JDBCUtil.selectList(sql);
	}

	
/////////////////////////////////////////////////////////////////////////////////

	
	//각 제품 3개씩 출력
	public List<Map<String, Object>> breadList(){
		String sql = "SELECT U.* " + 
				" FROM " + 
				" ( " + 
				"    SELECT ROWNUM RNUM, T.* " + 
				"    FROM " + 
				"    ( " + 
				"        SELECT MENU_ID FROM B_MENU " + 
				"        WHERE  MENU_ID LIKE 'a%' " + 
				"        ORDER BY MENU_ID DESC " + 
				"    ) T " + 
				" ) U " + 
				" WHERE U.RNUM <= 3";
		
		return JDBCUtil.selectList(sql);
	}
	
	public List<Map<String, Object>> cookieList(){
		String sql = "SELECT U.* " + 
				" FROM " + 
				" ( " + 
				"    SELECT ROWNUM RNUM, T.* " + 
				"    FROM " + 
				"    ( " + 
				"        SELECT MENU_ID FROM B_MENU " + 
				"        WHERE  MENU_ID LIKE 'b%' " + 
				"        ORDER BY MENU_ID DESC " + 
				"    ) T " + 
				" ) U " + 
				" WHERE U.RNUM <= 3";
		
		return JDBCUtil.selectList(sql);
	}
	
	public List<Map<String, Object>> cakeList(){
		String sql = "SELECT U.* " + 
				" FROM " + 
				" ( " + 
				"    SELECT ROWNUM RNUM, T.* " + 
				"    FROM " + 
				"    ( " + 
				"        SELECT MENU_ID FROM B_MENU " + 
				"        WHERE  MENU_ID LIKE 'c%' " + 
				"        ORDER BY MENU_ID DESC " + 
				"    ) T " + 
				" ) U " + 
				" WHERE U.RNUM <= 3";
		
		return JDBCUtil.selectList(sql);
	}
	
	public List<Map<String, Object>> drinkList(){
		String sql = "SELECT U.* " + 
				" FROM " + 
				" ( " + 
				"    SELECT ROWNUM RNUM, T.* " + 
				"    FROM " + 
				"    ( " + 
				"        SELECT MENU_ID FROM B_MENU " + 
				"        WHERE  MENU_ID LIKE 'd%' " + 
				"        ORDER BY MENU_ID DESC " + 
				"    ) T " + 
				" ) U " + 
				" WHERE U.RNUM <= 3";
		
		return JDBCUtil.selectList(sql);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////

	
	//MNG_LIST_MENU [1.메뉴 리스트 보기]
	public List<Map<String, Object>> listMenu(String type){
		String sql = "";
		if(type.equals("a")) {
			sql = "SELECT TO_NUMBER(SUBSTR(MENU_ID, 2)), MENU_NAME, MENU_PRICE, SUBSTR(MENU_DETAIL, 1, 8) || '...' FROM B_MENU WHERE MENU_ID LIKE 'a%'";
		}else if(type.equals("b")) {
			sql = "SELECT TO_NUMBER(SUBSTR(MENU_ID, 2)), MENU_NAME, MENU_PRICE, SUBSTR(MENU_DETAIL, 1, 8) || '...' FROM B_MENU WHERE MENU_ID LIKE 'b%'";
		}else if(type.equals("c")) {
			sql = "SELECT TO_NUMBER(SUBSTR(MENU_ID, 2)), MENU_NAME, MENU_PRICE, SUBSTR(MENU_DETAIL, 1, 8) || '...' FROM B_MENU WHERE MENU_ID LIKE 'c%'";
		}else{
			sql = "SELECT TO_NUMBER(SUBSTR(MENU_ID, 2)), MENU_NAME, MENU_PRICE, SUBSTR(MENU_DETAIL, 1, 8) || '...' FROM B_MENU WHERE MENU_ID LIKE 'd%'";
		}
		return JDBCUtil.selectList(sql);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////

	
	//MNG_READ_MENU [1.조회]
	public Map<String, Object> readMenu(int menuNo){
		String sql = "SELECT MENU_ID, MENU_NAME, MENU_PRICE, MENU_ACTIVE, MENU_DETAIL FROM B_MENU WHERE MENU_ID = ?";
		
		List<Object> param = new ArrayList<Object>();
		param.add(menuNo);
		
		return JDBCUtil.selectOne(sql, param);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////
	
	
	//MNG_EDIT_MENU [1-1.메뉴 수정]
	public int editMenu(String name, int price, String detail, String menuId){
		String sql = "INSERT B_MENU(MENU_NAME, MENU_PRICE, MENU_DETAIL) VALUES(?, ?, ?) WHERE MENU_ID = ?";
		List<Object> param = new ArrayList<Object>();
		
		param.add(name);
		param.add(price);
		param.add(detail);
		param.add(menuId);
		
		return JDBCUtil.update(sql, param);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////
	
	
	//MNG_DEL_MENU [1-2.메뉴 항목 삭제]
	public int delMenu(String menuId) {
		String sql = "DELETE FROM B_BOARD WHERE BOARD_NO = ?";
		List<Object> param = new ArrayList<Object>();
		
		param.add(menuId);
		return JDBCUtil.update(sql, param);
	}
	
			
/////////////////////////////////////////////////////////////////////////////////
			
			
	//MNG_INSERT_MENU [2.메뉴 추가]
	public int insertMenu(String type, String name, int price, String detail){
		String sql = "INSERT INTO B_MENU(MENU_ID, MEMU_NAME, MENU_PRICE, MENU_DETAIL, MEMU_ACTIVE) VALUES(? || MAX(TO_NUMBER(SUBSTR(NVL(MENU_ID,0), 2)))+1, ?, ?, ?, ?)";
		List<Object> param = new ArrayList<Object>();

		param.add(type);
		param.add(name);
		param.add(price);
		param.add(detail);
		param.add("활성");
		return JDBCUtil.update(sql, param);
	}

	
/////////////////////////////////////////////////////////////////////////////////

	
	//MNG_ACT_MENU [3.메뉴 항목 활성화]
	public List<Map<String, Object>> deactedList() {
		String sql = "SELECT MENU_ID, MENU_NAME, MENU_PRICE, MENU_ACTIVE FROM B_MENU WHERE MENU_ACTIVE LIKE '비%'";
		return JDBCUtil.selectList(sql);
	}
	
	public int actvating(int input){
		String sql = "UPDATE B_MENU SET MENU_ACTIVE = '활성' WHERE MENU_ID = ?";
		List<Object> param = new ArrayList<Object>();

		param.add(input);
		return JDBCUtil.update(sql, param);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////

	
	//MNG_DEACTIVATED [2. 메뉴 죽이기]
	public List<Map<String, Object>> actedList() {
		String sql = "SELECT MENU_ID, MENU_NAME, MENU_PRICE, MENU_ACTIVE FROM B_MENU WHERE MENU_ACTIVE LIKE '활%'";
		return JDBCUtil.selectList(sql);
	}
	
	public int deactvating(int input){
		String sql = "UPDATE B_MENU SET MENU_ACTIVE = '활성' WHERE MENU_ID = ?";
		List<Object> param = new ArrayList<Object>();

		param.add(input);
		return JDBCUtil.update(sql, param);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
	//MNG_ORDER [2.예약 관리]
	
	
	//예약 관리?
	public List<Map<String, Object>> mngOrder(){
		String sql = "SELECT RSV_OD, RSV_DATE, RSV_ETC, MEM_ID, RSV_APRV FROM B_RSV WHERE RSV_DATE > SYSDATE";
		return JDBCUtil.selectList(sql);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////
	
	
	//앞으로 찾아갈 승인된 예약 주문들
	public List<Map<String, Object>> aprvedOrder(){
		String sql = "SELECT RSV_OD, RSV_PIKCUP, RSV_ETC, MEM_ID FROM B_RSV WHERE RSV_APRV LIKE '승인' AND RSV_PICKUP > SYSDATE";
		return JDBCUtil.selectList(sql);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////
	
	
	//새로 예약해서 승인을 기다리는 주문 들
	public List<Map<String, Object>> newOrder(){
		String sql = "SELECT R.RSV_OD, M.MENU_NAME, (R.RSV_QTY || '개'), R.RSV_DATE, R.RSV_ETC, R.MEM_ID, R.RSV_APRV FROM B_RSV R, B_MENU M WHERE M.MENU_ID = r.RSV_CODE AND RSV_APRV LIKE '신청'";
		return JDBCUtil.selectList(sql);
	}
	
	
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
	//MNG_REVIEW [3.한줄평 관리]
	
	
	
	
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
	//MNG_BAKING [4.생산량 관리]
	
	
	
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
	//MNG_SALES [5.매출 관리]
	
	

	
	


} 
